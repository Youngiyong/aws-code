service: serverless-sns-sqs
# env 파일 사용
# https://www.serverless.com/framework/docs/environment-variables/
useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-plugin-warmup
  # https://www.serverless.com/plugins/serverless-jest-plugin
  # - serverless-jest-plugin
  # - serverless-plugin-dynamodb-autoscaling


custom:
  # service application 내 전역적으로 사용하는 서비스 네임, 기본 리소스명이기도 함
  SERVICE_NAME: ${self:service}-${self:provider.stage}
  warmup:
    enabled: true
    folderName: '_warmup' # Name of the folder created for the generated warmup 
    cleanFolder: false
    memorySize: 256
    name: 'test-warmup'
    schedule: 'cron(0/5 0-1 ? * MON-FRI *)' # Run WarmUP every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
    timeout: 20
    prewarm: true # Run WarmUp immediately after a deployment
    concurrency: 1
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-2
  timeout: 30 # optional, in seconds, default is 6
  lambdaHashingVersion: 20201221
  # deploymentBucket:
  #   blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  #   name: ${env:DEPLOYMENT_BUCKET} # Deployment bucket name. Default is generated by the framework
  #   maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
  # endpointType: REGIONAL
  iam:
    role:
      name: ${self:custom.SERVICE_NAME}
      # path:
      statements:
        - Effect: Allow
          Action:
            - "sns:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "s3:*"
          Resource: "*"
        # api.doc will call apigateway api
        - Effect: Allow
          Action:
            - "apigateway:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - 'lambda:InvokeFunction'
          Resource: "*"
    environment:
      # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      # 기본 : 배포설정, argements 로 입력
      STAGE: ${self:provider.stage}
      # 기본 : labda 타임존 설정
      TZ: "Asia/Seoul"

#Reference https://www.serverless.com/framework/docs/providers/aws/events/sns/
functions:
  lambdaHook:
    handler: src/handler.lambdaHook
    events:
      - http:
          path: /lambdahook
          description: "Lambda SNS Test"
          method: get
          cors:
            origin: "*"
            headers: "*"
    warmup: true
  sns:
    handler: src/handler.sns
    events:
      - sns:
        arn: !Ref LambdaTopic
        topicName: LambdaSNSTopic  
    warmup: false

  snsEventLambda:
    handler: src/handler.snsEvent
    events:
      - http:
          path: /snsEvent
          description: "Lambda SNS Test"
          method: get
          cors:
            origin: "*"
            headers: "*"
    warmup: false

# - sns
resources:
  Resources:
    LambdaTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: LambdaSNSTopic