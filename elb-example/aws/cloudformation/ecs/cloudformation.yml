AWSTemplateFormatVersion: 2010-09-09
Description: elb-example-ecs

# Environment variables
Parameters:

  #NetWork
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-de0f1fb6
  LBSubnetA:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-5ce1ed34
  LBSubnetB:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-e94bb092
  ExecutionRoleArn:
    Type: String
    Default: arn:aws:iam::299665028667:role/ecsTaskExecutionRole
  ContainerPort:
    Type: Number
    Default: 80
  ServiceName:
    Type: String
    Default: elb-example-test

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: elb-example-cluster2

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 512
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 4GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRoleArn
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Join ['', [!Ref "AWS::AccountId", .dkr.ecr.ap-northeast-2.amazonaws.com/lastorder/elb-example:latest]]
          PortMappings:
            - ContainerPort: !Ref ContainerPort

          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   - !Ref TaskRolePolicy
  TaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, -Policy]]
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
            - sns:*
            Resource: "*"
          - Effect: Allow
            Action: 
            - sqs:*
            Resource: "*"
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, -ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/ecs/, !Ref ServiceName]]

  Service:
    Type: AWS::ECS::Service
    Properties:
      # CloudFormation cannot update a stack when a custom-named resource requires replacing
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      # To use EFS, set PlatformVersion to 1.4.0 otherwise LATEST
      PlatformVersion: 1.4.0
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DeploymentController:
        Type: ECS
      DesiredCount: 2
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref LBSubnetA
            - !Ref LBSubnetB
          SecurityGroups:
            #- !Ref ContainerSecurityGroup
            - sg-01e262f663bf92d7a # - vpc
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup1

  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, -TargetGroup-1]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: deregistration_delay.timeout_seconds
          Value: 10 # default is 300
      TargetType: ip
      VpcId: !Ref VPC
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref ServiceName, -LoadBalancer]]
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        # - !Ref LoadbalancerSecurityGroup
        - sg-01e262f663bf92d7a
        - sg-042d11be4618f408f
      Subnets:
        - !Ref LBSubnetA
        - !Ref LBSubnetB